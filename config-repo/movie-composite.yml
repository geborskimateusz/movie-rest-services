api:

  common:
    version: 1.0.0
    title: Movie API
    description: Simple Movie API created for purpose of learning microservices.
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

  contact:
    name: Mateusz Geborski
    url: https://www.linkedin.com/in/mateusz-g%C4%99borski/
    email: mateuszgeborski@gmail.com

  movie-composite:

    get-composite-movie:
      description: Returns a composite view of the specified movie id
      notes: |
        # Normal response
        If the requested movie id is found the method will return information regarding:
        1. Base movie information
        1. Reviews
        1. Recommendations
        1. Service Addresses
        (technical information regarding the addresses of the microservices that created the response)
        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)

        ## movie id 113
        200 - Ok, but no recommendations will be returned

        ## movie id 213
        200 - Ok, but no reviews will be returned

        ## Non numerical movie id
        400 - A <b>Bad Request</b> error will be returned

        ## movie id 13
        404 - A <b>Not Found</b> error will be returned

        ## Negative movie ids
        422 - An <b>Unprocessable Entity</b> error will be returned

    create-composite-movie:
      description: Creates a composite movie
      notes: |
        # Normal response
        The composite movie information posted to the API will be splitted up and stored as separate movie-info, recommendation and review entities.
        # Expected error responses
        1. If a movie with the same movieId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned
    delete-composite-movie:
      description: Deletes a composite movie
      notes: |
        # Normal response
                Entities for movie information, recommendations and reviews related to the specificed movieId will be deleted.
                The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
                This means that a delete request of a non existing movie will return <b>200 Ok</b>.
server.port: 7000

ribbon.ServerListRefreshInterval: 5000

ribbon.NFLoadBalancerPingInterval: 5

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    output-movies:
      destination: movies
      producer:
        required-groups: auditGroup
    output-recommendations:
      destination: recommendations
      producer:
        required-groups: auditGroup
    output-reviews:
      destination: reviews
      producer:
        required-groups: auditGroup

spring.security.oauth2.resourceserver.jwt.jwk-set-uri: http://${app.auth-server}:9999/.well-known/jwks.json

#OAuth
#spring.security.oauth2.resourceserver.jwt.issuer-uri: https://dev-3cs7odlv.eu.auth0.com/

app.movie-service.timeoutSec: 2

resilience4j.retry:
  backends:
    product:
      maxRetryAttempts: 3
      waitDuration: 1000
      retryExceptions:
        - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError

resilience4j.circuitbreaker:
  backends:
    product:
      registerHealthIndicator: true
      ringBufferSizeInClosedState: 5
      failureRateThreshold: 50
      waitInterval: 10000
      ringBufferSizeInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      ignoreExceptions:
        - com.geborskimateusz.util.exceptions.InvalidInputException
        - com.geborskimateusz.util.exceptions.NotFoundException

logging:
  level:
    root: INFO
    se.magnus: DEBUG
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: TRACE

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"
management:
  health:
    defaults:
      enabled=false:
---
spring.profiles: docker

server.port: 8080

---
spring.profiles: streaming_partitioned

spring.cloud.stream.bindings.output-products.producer:
  partition-key-expression: payload.key
  partition-count: 2

spring.cloud.stream.bindings.output-recommendations.producer:
  partition-key-expression: payload.key
  partition-count: 2

spring.cloud.stream.bindings.output-reviews.producer:
  partition-key-expression: payload.key
  partition-count: 2

---
spring.profiles: kafka

management.health.rabbit.enabled: false
spring.cloud.stream.defaultBinder: kafka